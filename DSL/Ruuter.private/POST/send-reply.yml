
#
# TODO later: use validate-message template to validate the sender
#

check_for_body:
  switch:
    - condition: ${incoming.body == null}
      next: return_incorrect_request
  next: assign_info

assign_info:
  assign:
    message: ${incoming.body.message}
    type: ${incoming.body.type}
    reply_to_message_id: ${incoming.body.reply_to_message_id}
    receiver_id: ${incoming.body.receiver_id}
    sender_id: ${incoming.body.sender_id}  # TODO later: extract this from jwt
  next: encrpyt_reply_message

encrpyt_reply_message:
  call: http.post
  args:
    url: "[#CENTOPS_RUUTER_PRIVATE]:[#CENTOPS_RUUTER_PRIVATE_PORT]/templates/encryption/aes"
    body:
      content: ${message}
      key: 'test'
  result: encryptedMessageResult
  next: send_reply_message

send_reply_message:
  call: http.post
  args:
    url: "[#CENTOPS_RESQL]:[#CENTOPS_RESQL_PORT]/send-reply-message"
    body: 
      message: ${message}
      type: ${type}
      receiver_id: ${receiver_id}
      sender_id: ${sender_id}
      reply_to_message_id: ${reply_to_message_id}
  result: messageResult
  next: return_ok

return_ok:
  wrapper: false
  status: 201
  return: "Message has been sent"
  next: end

return_incorrect_request:
  status: 400
  return: "User email is required"
  next: end

return_unauthorized:
  return: "error: unauthorized"
  status: 401
  next: end
